    <div id="ProductImagesWrapper" class="{{ product_images_wrapper_classes }} w-full">
<!-- Gallery Items -->
<div
        id="ProductGalleryItems"
        class="hidden md:block md:pr-3 md:grow-0 md:shrink-0 md:w-1/6"
        style="max-height: 844px; overflow-y: auto;"
>
        {% for image in product.images %}
<img
            class="w-full thumbnail this-one secondary-image"
            src="{{ image | img_url: '800x' }}"
            alt="White"
            data-uw-rm-alt-original="White"
            data-uw-rm-alt="ALT"
>
        {% endfor %}
</div>
 
      <!-- Main Image -->
<div
        class="product-main-image relative{% if settings.enable_pdp_main_images_t_across %} w-full{% else %} w-full {% if settings.pdp_thumbnail_pos != 'bottom' %} md:grow md:shrink-0 md:w-5/6{% endif %}{% endif %}"
>
<div id="ProductMainImageContainer" class="relative w-full">
<div class="absolute top-0 left-0 w-full h-full z-10 pointer-events-none">
            {% include 'smart-tags-render-smart-tag-badge-pdp' %}
</div>
<div class="product-label-container">            
<!-- NEW / SOLD OUT LABEL -->
{% assign specific_tag = 'Badge:Preorder' %}
{% assign specific_tag_value = 'Badge:ComingSoon' %}
{% if product.available == false %}
 
                {% if product.tags contains 'Badge:Isabella' %}
<div class="product-label two-line-badge"><span>As Seen On</span> <span>Isabella Strahan</span></div>
                {% elsif product.tags contains 'Badge:Rachel' %}
<div class="product-label two-line-badge"><span>As Seen On</span> <span> Rachel Platten </span> </div>
                {% elsif product.tags contains 'Badge:Stylist' %}
<div class="product-label two-line-badge badge"><span>Stylist's</span> <span>Pick</span></div>
                {% elsif product.tags contains specific_tag %}
<div class="product-label">PREORDER</div>
                {% elsif product.tags contains specific_tag_value %}  
<div class="product-label">COMING SOON</div>
                {% else %}
                  {% comment %} <div class="product-label">SOLD OUT</div>   {% endcomment %}  
                {% endif %}
              {% else %}
 
                 {% if product.tags contains 'Badge:Isabella' %}
<div class="product-label two-line-badge"><span>As Seen On</span> <span>Isabella Strahan</span></div>
                {% elsif product.tags contains 'Badge:Rachel' %}
<div class="product-label two-line-badge"><span>As Seen On</span> <span> Rachel Platten </span> </div>
                {% elsif product.tags contains 'Badge:Stylist' %}
<div class="product-label two-line-badge badge"><span>Stylist's</span> <span>Pick</span></div>
                 {% elsif product.tags contains specific_tag %}
<div class="product-label">PREORDER</div>
                  {% else %}
                   {% for t in product.tags %}
                      {% if t contains 'Badge:BackinStock' %} 
<div class="product-label">BACK IN STOCK</div>
                      {% elsif t contains 'smarttag_new_arrival' %} 
<div class="product-label">NEW</div>
                      {% endif %}
                    {% endfor %}
                  {% endif %}
              {% endif %}
</div>
<div class="image-container">
<img
              id="mainImage"
              class="w-full{% if settings.enable_pdp_main_images_t_across %} hidden{% endif %} image-zoom"
              src="{{ featured_image | img_url: '800x' }}"
              data-zoom="{{ featured_image | img_url: '1024x1024', scale: 2 }}"
              alt="{{ featured_image.alt | escape }}"
>
<div class="image-details"></div>
</div>
</div>
</div>
</div>


// Color list which need to show the main img by click any one of the color

<div class="color-circle-container">
<div class="color-swatch-link" data-color-name="{{ value }}">
 
    {% assign swatch_image = '' %}
    {% assign lower_value = value | downcase %}
 
    {% for image in product.images %}
      {% if image.src contains lower_value and image.src contains '_sw' %}
        {% assign swatch_image = image %}
        {% break %}
      {% endif %}
    {% endfor %}
 
    {% if swatch_image != '' %}
<img class="color-variant" src="{{ swatch_image | img_url: '1024x' }}" alt="{{ value }}">
    {% else %}
<div class="color-variant no-image-color" style="background-color: {{ value | downcase }};"></div>
    {% endif %}
 
  </div>
</div>


<script>
  document.addEventListener("DOMContentLoaded", function () {
    const variants = {{ product.variants | json }};
    let selectedColor = "{{ product.selected_or_first_available_variant.option1 }}";
    let selectedSize = "";
    const variantInput = document.getElementById("pdp-cart-btn");
    const addToCartBtn = document.querySelector(".add-to-cart-btn");
    const colorLinks = document.querySelectorAll(".color-swatch-link");
    const sizeItems = document.querySelectorAll(".size-item");
    const priceDisplay = document.getElementById("variant-price");
    const priceDisplayDesktop = document.getElementById("variant-price-desktop");
	const colorDisplay = document.getElementById("variant-color");
    function updateDisplayedPrice(matchedVariant) {
      if (matchedVariant) {
        priceDisplay.textContent = matchedVariant.price
          ? `$${(matchedVariant.price / 100).toFixed(2)}`
          : '';
         priceDisplayDesktop.textContent = matchedVariant.price
          ? `$${(matchedVariant.price / 100).toFixed(2)}`
          : '';
		 colorDisplay.textContent = selectedColor ? selectedColor : ''
      } else {
        priceDisplay.textContent = '';
      }
    }
    function updateSelectedVariant() {
      let matchedVariant = variants.find(v =>
        v.option1.toLowerCase() === selectedColor.toLowerCase() &&
        v.option2.toLowerCase() === selectedSize.toLowerCase()
      );
      if (!matchedVariant && selectedSize) {
        const numberMatch = selectedSize.match(/^\d+/);
        if (numberMatch) {
          const sizeNumber = numberMatch[0];
          matchedVariant = variants.find(v =>
            v.option1.toLowerCase() === selectedColor.toLowerCase() &&
            v.option2.toLowerCase().startsWith(sizeNumber)
          );
        }
      }
      if (!matchedVariant) {
        matchedVariant = variants.find(v =>
          v.option1.toLowerCase() === selectedColor.toLowerCase()
        );
      }
      if (matchedVariant && matchedVariant.available) {
        variantInput.value = matchedVariant.id;
        addToCartBtn.disabled = false;
      } else {
        variantInput.value = "";
        addToCartBtn.disabled = true;
      }
      updateDisplayedPrice(matchedVariant);
    }
    function selectFirstAvailableSizeForColor() {
      let firstAvailable = null;
      sizeItems.forEach(item => {
        const size = item.textContent.trim();
        const matchingVariant = variants.find(v =>
          v.option1.toLowerCase() === selectedColor.toLowerCase() &&
          v.option2.toLowerCase() === size.toLowerCase() &&
          v.available
        );
        item.classList.remove("active");
        if (matchingVariant && !firstAvailable) {
          firstAvailable = item;
          selectedSize = size;
        }
      });
      if (firstAvailable) {
        firstAvailable.classList.add("active");
        updateSelectedVariant();
      }
    }
    colorLinks.forEach(link => {
      link.addEventListener("click", () => {
        colorLinks.forEach(l => l.classList.remove("active"));
        link.classList.add("active");
        selectedColor = link.dataset.colorName || link.textContent.trim();
        document.querySelector("#selected-color strong").innerText = selectedColor.toUpperCase();
        selectedSize = "";
        sizeItems.forEach(item => item.classList.remove("active"));

 
        // Update available sizes
        sizeItems.forEach(item => {
          const size = item.textContent.trim();
          const matchingVariant = variants.find(v =>
            v.option1.toLowerCase() === selectedColor.toLowerCase() &&
            v.option2.toLowerCase() === size.toLowerCase()
          );
          if (matchingVariant && matchingVariant.available) {
            item.classList.remove("size-unavailable");
          } else {
            item.classList.add("size-unavailable");
          }
        });
 

        selectFirstAvailableSizeForColor();
      });
    });
    sizeItems.forEach(item => {
      item.addEventListener("click", () => {
        if (item.classList.contains("size-unavailable")) return;
        if (item.classList.contains("active")) {
          item.classList.remove("active");
          selectedSize = "";
          variantInput.value = "";
          addToCartBtn.disabled = true;
          updateDisplayedPrice(null);
 

          selectFirstAvailableSizeForColor();
        } else {
          sizeItems.forEach(i => i.classList.remove("active"));
          item.classList.add("active");
          selectedSize = item.dataset.sizeName || item.textContent.trim();
          updateSelectedVariant();
        }
      });
    });
 

    const firstColorLink = colorLinks[0];
    if (firstColorLink) {
      firstColorLink.classList.add("active");
      selectedColor = firstColorLink.dataset.colorName || firstColorLink.textContent.trim();
      document.querySelector("#selected-color strong").innerText = selectedColor.toUpperCase();
 

      sizeItems.forEach(item => {
        const size = item.textContent.trim();
        const matchingVariant = variants.find(v =>
          v.option1.toLowerCase() === selectedColor.toLowerCase() &&
          v.option2.toLowerCase() === size.toLowerCase()
        );
        if (matchingVariant && matchingVariant.available) {
          item.classList.remove("size-unavailable");
        } else {
          item.classList.add("size-unavailable");
        }
      });
 

      selectFirstAvailableSizeForColor();
    }
  });
</script>
